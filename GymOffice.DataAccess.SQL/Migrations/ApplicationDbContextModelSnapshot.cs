// <auto-generated />
using System;
using GymOffice.DataAccess.SQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymOffice.DataAccess.SQL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GroupTrainingRecord", b =>
                {
                    b.Property<Guid>("CustomersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupTrainingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomersId", "GroupTrainingsId");

                    b.HasIndex("GroupTrainingsId");

                    b.ToTable("GroupTrainingRecord");
                });

            modelBuilder.Entity("GymOffice.Common.DTOs.Abonnement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActivationTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("IssueTime")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Abonnements");
                });

            modelBuilder.Entity("GymOffice.Common.DTOs.AbonnementType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nvarchar");

                    b.Property<string>("EndVisitTime")
                        .IsRequired()
                        .HasColumnType("nvarchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PriceForMonth")
                        .HasPrecision(2)
                        .HasColumnType("decimal(2)");

                    b.Property<string>("StartVisitTime")
                        .IsRequired()
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.ToTable("AbonnementTypes");
                });

            modelBuilder.Entity("GymOffice.Common.DTOs.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("GymOffice.Common.DTOs.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("GymOffice.Common.DTOs.GroupTraining", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar");

                    b.Property<int>("MaxCustomersNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("GroupTrainings");
                });

            modelBuilder.Entity("GymOffice.Common.DTOs.JobSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("int");

                    b.Property<string>("DayOfWeek")
                        .HasColumnType("nvarchar");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("SpecificDate")
                        .HasColumnType("date");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("JobSchedules");
                });

            modelBuilder.Entity("GymOffice.Common.DTOs.PersonalTraining", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nvarchar");

                    b.Property<DateTime>("ScheduledEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ScheduledStartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("CustomerId");

                    b.ToTable("PersonalTrainings");
                });

            modelBuilder.Entity("GymOffice.Common.DTOs.TrainingVisit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("GroupTrainingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PersonalTrainingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("GroupTrainingId");

                    b.HasIndex("PersonalTrainingId");

                    b.ToTable("TrainingVisits");
                });

            modelBuilder.Entity("GymOffice.Common.DTOs.Coach", b =>
                {
                    b.HasBaseType("GymOffice.Common.DTOs.Employee");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Coach", (string)null);
                });

            modelBuilder.Entity("GroupTrainingRecord", b =>
                {
                    b.HasOne("GymOffice.Common.DTOs.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymOffice.Common.DTOs.GroupTraining", null)
                        .WithMany()
                        .HasForeignKey("GroupTrainingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymOffice.Common.DTOs.Abonnement", b =>
                {
                    b.HasOne("GymOffice.Common.DTOs.Customer", "Customer")
                        .WithMany("Abonnements")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymOffice.Common.DTOs.AbonnementType", "AbonnementType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AbonnementType");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GymOffice.Common.DTOs.GroupTraining", b =>
                {
                    b.HasOne("GymOffice.Common.DTOs.Coach", "Coach")
                        .WithMany("GroupTrainings")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("GymOffice.Common.DTOs.JobSchedule", b =>
                {
                    b.HasOne("GymOffice.Common.DTOs.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GymOffice.Common.DTOs.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Coach");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("GymOffice.Common.DTOs.PersonalTraining", b =>
                {
                    b.HasOne("GymOffice.Common.DTOs.Coach", "Coach")
                        .WithMany("PersonalTrainings")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymOffice.Common.DTOs.Customer", "Customer")
                        .WithMany("PersonalTrainings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GymOffice.Common.DTOs.TrainingVisit", b =>
                {
                    b.HasOne("GymOffice.Common.DTOs.GroupTraining", "GroupTraining")
                        .WithMany()
                        .HasForeignKey("GroupTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymOffice.Common.DTOs.PersonalTraining", "PersonalTraining")
                        .WithMany()
                        .HasForeignKey("PersonalTrainingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("GroupTraining");

                    b.Navigation("PersonalTraining");
                });

            modelBuilder.Entity("GymOffice.Common.DTOs.Coach", b =>
                {
                    b.HasOne("GymOffice.Common.DTOs.Employee", null)
                        .WithOne()
                        .HasForeignKey("GymOffice.Common.DTOs.Coach", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymOffice.Common.DTOs.Customer", b =>
                {
                    b.Navigation("Abonnements");

                    b.Navigation("PersonalTrainings");
                });

            modelBuilder.Entity("GymOffice.Common.DTOs.Coach", b =>
                {
                    b.Navigation("GroupTrainings");

                    b.Navigation("PersonalTrainings");
                });
#pragma warning restore 612, 618
        }
    }
}
