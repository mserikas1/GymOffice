@page "/admin/visitors"
@attribute [Authorize(Roles = "Admin")]
@inject IUpdateVisitorCommand UpdateVisitorCommand
    
<!-- All Visitors list with checkin possibility -->
<MudText Align="Align.Center">All visitors list allows to activate and/or check-in a selected visitor.</MudText>
<MudItem xs="4" sm="4" md="12" Style="overflow-y: scroll; overflow-x: scroll">
    <MudCard Elevation="0" Class="rounded-lg pb-4">
        <MudCardHeader>
            <CardHeaderContent>
                <MudTextField T="string" ValueChanged="@(str=>OnVisitorSearch(str))" Placeholder="Search a visitor" Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudTable Ref="@visitorsTable" Items="@Visitors" Hover="true" Dense="true" T="Visitor">
                <HeaderContent>
                    <MudTh><MudTableSortLabel Enabled="false" 
                        SortBy="new Func<Visitor, object>(x=>x.FirstName!)">First Name</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="ln_sort" T="Visitor" InitialDirection="SortDirection.Ascending" 
                        SortBy="new Func<Visitor, object>(x=>x.LastName!)">Last Name</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="em_sort" T="Visitor" 
                        SortBy="new Func<Visitor, object>(x=>x.Email!)">Email</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="ph_sort" T="Visitor" 
                        SortBy="new Func<Visitor, object>(x=>x.PhoneNumber!)">Phone Number</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="bc_sort" T="Visitor" 
                        SortBy="new Func<Visitor, object>(x=>x.VisitorCard?.BarCode!)">Card Number</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="ac_sort" T="Visitor" 
                        SortBy="new Func<Visitor, object>(x=>x.IsActive)">Active</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="ig_sort" T="Visitor"
                        SortBy="new Func<Visitor, object>(x=>x.IsInGym)">In Gym</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Class="flex-shrink-0" DataLabel="First Name">@context.FirstName</MudTd>
                    <MudTd Class="flex-shrink-0" DataLabel="Last Name">@context.LastName</MudTd>
                    <MudTd DataLabel="Email" HideSmall="true">@context.Email</MudTd>
                    <MudTd DataLabel="Phone Number" HideSmall="true">@context.PhoneNumber</MudTd>
                    <MudTd DataLabel="Card Number" HideSmall="true">@context.VisitorCard?.BarCode</MudTd>
                    <MudTd DataLabel="Active" HideSmall="true">
                        <MudButton Variant="Variant.Text" OnClick="@(()=>IsActiveChanged(context))"
                            StartIcon="@(context.IsActive ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" 
                            Color="@(context.IsActive ? Color.Success : Color.Error)">
                            <MudText>@(context.IsActive ? "YES" : "NO  ")</MudText>
                        </MudButton>
                    </MudTd>
                    <MudTd Class="flex-shrink-0" DataLabel="In Gym">
                        <MudButton Variant="Variant.Text" Disabled="@(!context.IsActive)" OnClick="@(()=>IsInGymChanged(context))"
                            StartIcon="@(context.IsInGym ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" 
                            Color="@(context.IsInGym ? Color.Success : Color.Error)">
                            <MudText>@(context.IsInGym ? "YES" : "NO  ")</MudText>
                        </MudButton>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText>No matching records found</MudText>
                </NoRecordsContent>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[]{8, 15, 30}" InfoFormat="@infoFormat" HorizontalAlignment="HorizontalAlignment.Center" />
                </PagerContent>
            </MudTable>
        </MudCardContent>
    </MudCard>
</MudItem>

@code {
    [Inject] public IVisitorDataProvider VisitorDataProvider { get; set; } = null!;

    // [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    // void Close() => MudDialog?.Close(DialogResult.Ok(true)); // for the button: OnClick="Close"

    private ICollection<Visitor>? Visitors = new List<Visitor>();
    private MudTable<Visitor>? visitorsTable;
    private Visitor? changedVisitor = null;
    private string? visitorSearchString = null;
    private string infoFormat = "Items {first_item}-{last_item} of {all_items}";

    protected override async Task OnInitializedAsync()
    {
        visitorsTable = new();
        await GetVisitorsAsync();
    }

    private async Task GetVisitorsAsync()
    {
        Visitors = await VisitorDataProvider.GetAllVisitorsAsync();
        await Task.Delay(100); // for db connection stability
    }

    // Changing the value in the table should change it in the database
    private async Task IsActiveChanged(Visitor currentVisitor)
    {
        changedVisitor = currentVisitor;
        if (changedVisitor != null)
        {
            changedVisitor.IsActive = !changedVisitor.IsActive;
            if (!changedVisitor.IsActive)
                changedVisitor.IsInGym = false;
            await UpdateVisitorCommand.ExecuteAsync(changedVisitor);
        }
        StateHasChanged();
    }

    private async Task IsInGymChanged(Visitor currentVisitor)
    {
        changedVisitor = currentVisitor;
        if (changedVisitor != null)
        {
            changedVisitor.IsInGym = !changedVisitor.IsInGym;
            await UpdateVisitorCommand.ExecuteAsync(changedVisitor);
        }
        StateHasChanged();
    }

    private async Task VisitorsReloadAsync(string? sortLabel)
    {
        await GetVisitorsAsync();
        if (!string.IsNullOrWhiteSpace(visitorSearchString))
            Visitors = Visitors?
                .Where(c => $"{c.FirstName} {c.LastName} {c.Email} {c.PhoneNumber} {c.VisitorCard?.BarCode}"
                      .Contains(visitorSearchString, StringComparison.OrdinalIgnoreCase))
                .ToList();
        switch (sortLabel)
        {
            case "ln_sort":
                Visitors = Visitors.OrderByDirection(SortDirection.Ascending, o => o.LastName).ToList();
                break;
            case "em_sort":
                Visitors = Visitors.OrderByDirection(SortDirection.Ascending, o => o.Email).ToList();
                break;
            case "ph_sort":
                Visitors = Visitors.OrderByDirection(SortDirection.Ascending, o => o.PhoneNumber).ToList();
                break;
            case "bc_sort":
                Visitors = Visitors.OrderByDirection(SortDirection.Ascending, o => o.VisitorCard.BarCode).ToList();
                break;
            case "ac_sort":
                Visitors = Visitors.OrderByDirection(SortDirection.Ascending, o => o.IsActive).ToList();
                break;
            case "ig_sort":
                Visitors = Visitors.OrderByDirection(SortDirection.Ascending, o => o.IsInGym).ToList();
                break;
        }
        // Visitors = Visitors.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();
        StateHasChanged();
    }

    private async Task OnVisitorSearch(string text)
    {
        visitorSearchString = text;
        await VisitorsReloadAsync(visitorsTable?.SortLabel);
    }
}
