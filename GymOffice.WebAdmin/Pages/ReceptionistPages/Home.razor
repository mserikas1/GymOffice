@page "/receptionist"
@if (ErrorMessage != null)
{
    <ErrorDisplay ErrorMessage="@ErrorMessage" ResetError="HandleResetError" />
}
else if (coachesTable == null || visitorsTable == null)
{
    <MudText Typo="Typo.h6" Class="pa-5">Loading data...</MudText>
    <DisplaySpinner />
}
else
{
<MudContainer Class="mt-4">
    <MudText Align="Align.Center">Receptionist's Work Place shows lists of visitors in gym and coaches at work and allows to check them in and register new visitors.</MudText>
    <MudGrid Class="mt-0">
        <!-- Visitors list -->
        <MudItem xs="12" sm="6">
            <MudCard Elevation="25" Class="rounded-lg pb-2">
                <MudCardActions Class="d-flex justify-center">
                    <!-- Opening Visitors Not In Gym list with checkin possibility -->
                    <MudButton Variant="Variant.Filled" Class="md-3 mr-3" Color="Color.Primary" Size="Size.Medium" Style="width:40%;"
                        OnClick="CheckVisitorInClick">Check Visitor In</MudButton> 
                    <!-- Going to a visitor registration form -->
                        <MudButton Variant="Variant.Filled" Class="md-3" Color="Color.Primary" Size="Size.Medium" Style="width:40%;" 
                        OnClick="RegisterNewVisitorClick">New Visitor...</MudButton>
                </MudCardActions>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" Align="Align.Center">Visitors In Gym</MudText>
                        <MudTextField T="string" ValueChanged="@(str=>OnVisitorSearch(str))" Placeholder="Search a visitor" Adornment="Adornment.Start"
                            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudTable Ref="@visitorsTable" Items="@Visitors" Hover="true" Dense="true" Striped="true" RowsPerPage="6"
                            OnRowClick="VisitorRowClickEvent" T="Visitor">
                        <HeaderContent>
                            <MudTh>First Name</MudTh>
                            <MudTh><MudTableSortLabel SortLabel="ln_sort" T="Visitor" InitialDirection="SortDirection.Ascending" 
                                SortBy="new Func<Visitor, object>(x=>x.LastName!)">Last Name</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortLabel="ph_sort" T="Visitor" 
                                SortBy="new Func<Visitor, object>(x=>x.PhoneNumber!)">Phone Number</MudTableSortLabel></MudTh>
                            <MudTh>View</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="First Name">@context.FirstName</MudTd>
                            <MudTd DataLabel="Last Name">@context.LastName</MudTd>
                            <MudTd DataLabel="Phone Number" HideSmall="true">@context.PhoneNumber</MudTd>
                            <MudTd><MudIconButton Icon="@Icons.Material.Filled.Preview" Variant="Variant.Filled" Color="Color.Default"
                                    Size="Size.Small" OnClick="(() => OpenVisitorView(context))" />
                            </MudTd>
                        </RowTemplate>
                        <NoRecordsContent>
                            <MudText>No matching records found</MudText>
                        </NoRecordsContent>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[]{6, 10, 20}" InfoFormat="@infoFormat" HorizontalAlignment="HorizontalAlignment.Center" />
                        </PagerContent>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <!-- Coaches list -->
        <MudItem xs="12" sm="6">
            <MudCard Elevation="25" Class="rounded-lg pb-2">
                <MudCardActions Class="d-flex justify-center">
                    <!-- Opening Coaches Not At Work list with checkin possibility -->
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" Style="width:40%;" 
                        OnClick="CheckCoachInClick">Check Coach In</MudButton>
                </MudCardActions>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" Align="Align.Center">Coaches At Work</MudText>
                        <MudTextField T="string" ValueChanged="@(str=>OnCoachSearch(str))" Placeholder="Search a coach" Adornment="Adornment.Start"
                            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                        <MudTable Ref="@coachesTable" Items="@Coaches" Hover="true" Dense="true" Striped="true" RowsPerPage="6"
                            OnRowClick="CoachRowClickEvent" T="Coach">
                        <HeaderContent>
                                <MudTh>First Name</MudTh>
                                <MudTh><MudTableSortLabel SortLabel="ln_sort" T="Coach" InitialDirection="SortDirection.Ascending" 
                                SortBy="new Func<Coach, object>(x=>x.LastName)">Last Name</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortLabel="ph_sort" T="Coach" 
                                SortBy="new Func<Coach, object>(x=>x.PhoneNumber)">Phone Number</MudTableSortLabel></MudTh>
                            <MudTh>View</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="First Name">@context.FirstName</MudTd>
                            <MudTd DataLabel="Last Name">@context.LastName</MudTd>
                            <MudTd DataLabel="Phone Number" HideSmall="true">@context.PhoneNumber</MudTd>
                               <MudTd><MudIconButton Icon="@Icons.Material.Filled.Preview" Variant="Variant.Filled" Color="Color.Default"
                                    Size="Size.Small" OnClick="(() => OpenCoachView(context))" />
                            </MudTd>
                         </RowTemplate>
                        <NoRecordsContent>
                            <MudText>No matching records found</MudText>
                        </NoRecordsContent>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[]{6, 10, 20}" InfoFormat="@infoFormat" HorizontalAlignment="HorizontalAlignment.Center" />
                        </PagerContent>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>
}

@code {
    [Inject] public IVisitorRepository VisitorRepository { get; set; } = null!;
    [Inject] public IEmployeeRepository EmployeeRepository { get; set; } = null!;
    [Inject] public ICoachRepository CoachRepository { get; set; } = null!;
    [Inject] public IDialogService DialogService { get; set; } = null!;
    [Inject] public ICoachDataProvider CoachDataProvider { get; set; } = null!;
    [Inject] public IVisitorDataProvider VisitorDataProvider { get; set; } = null!;
    [Inject] public IAddCoachCommand AddCoachCommand { get; set; } = null!;
    [Inject] public IAddAdministratorCommand AddAdministratorCommand { get; set; } = null!;
    [Inject] public IAddVisitorCardCommand AddVisitorCardCommand { get; set; } = null!;
    [Inject] public IAddVisitorCommand AddVisitorCommand { get; set; } = null!;

    private MudTable<Visitor>? visitorsTable = null;
    private MudTable<Coach>? coachesTable = null;
    private string? visitorSearchString = null;
    private string? coachSearchString = null;
    private string infoFormat = "Items {first_item}-{last_item} of {all_items}";
    private ICollection<Visitor>? Visitors = new List<Visitor>();
    private ICollection<Coach>? Coaches = new List<Coach>();
    public string? ErrorMessage { get; set; } = null;


    protected override async Task OnInitializedAsync()
    {
        // await AddAdminCoachesVisitorsToDB(); // call it ONCE to fill the empty DB with coaches and visitors and add one admin (Oleg M)

        await GetCoachesAtWorkAsync();
        await GetVisitorsInGymAsync();
        coachesTable = new();
        visitorsTable = new();
    }

    private async Task HandleResetError()
    {
        ErrorMessage = null;
        await GetCoachesAtWorkAsync();
        await GetVisitorsInGymAsync();
        coachesTable = new();
        visitorsTable = new();
        StateHasChanged();
    }

    private async Task GetCoachesAtWorkAsync()
    {
        try
        {
            Coaches = await CoachDataProvider.GetCoachesAtWorkAsync();
            await Task.Delay(100); // for db connection stability
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private async Task GetVisitorsInGymAsync()
    {
        try
        {
            Visitors = await VisitorDataProvider.GetVisitorsInGymAsync();
            await Task.Delay(100); // for db connection stability
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    /// <summary>Temporary method, call it ONCE to fill the empty DB with coaches and visitors and add one admin (Oleg M)</summary>
    private async Task AddAdminCoachesVisitorsToDB()
    {
        Random r = new Random();
        Admin? admin = null;

        try
        { 
            admin = EmployeeRepository.GetAdministrators()?.FirstOrDefault();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }

        if (admin == null)
        {
            admin = new Admin()
                {
                    Id = new Guid(),
                    FirstName = "Oleg",
                    LastName = "Melnykov",
                    Email = "olegm72@gmail.com",
                    IsActive = true,
                    PassportNumber = (char)(r.Next(65, 82)) + (char)(r.Next(65, 82)) + r.Next(100000, 999999).ToString(),
                    PhoneNumber = "+38067" + r.Next(1000000, 9999999).ToString(),
                    PhotoUrl = "OlegMelnykov.jpg"
                };
            try
            {
                await AddAdministratorCommand.ExecuteAsync(admin);
            }
            catch (Exception ex)
            {
                ErrorMessage = ex.Message;
            }
        }

        Coaches = new List<Coach>() {
            new Coach() { FirstName = "Nick", LastName = "Kirgios", Email = "Nick@australia.open.com", IsActive = true },
            new Coach() { FirstName = "Rafael", LastName = "Nadal", Email = "Rafa@tennis.es", IsActive = true },
            new Coach() { FirstName = "Roger", LastName = "Federer", Email = "Roger@Federer.com", IsActive = false },
            new Coach() { FirstName = "Olexander", LastName = "Dolgopolov", Email = "dolgo@ukraine.tennis.ua", IsActive = false },
            new Coach() { FirstName = "Elina", LastName = "Svitolina", Email = "svito@ukr.net", IsActive = true },
            new Coach() { FirstName = "Marta", LastName = "Kostyuk", Email = "marta@16years.btu.ua", IsActive = false },
            new Coach() { FirstName = "Novak", LastName = "Djokovich", Email = "antivaxer@serbia.net", IsActive = true },
            new Coach() { FirstName = "Yaroslava", LastName = "Maguchikh", Email = "jumping@heroes.com", IsActive = true },
            new Coach() { FirstName = "Serena", LastName = "Williams", Email = "serena@loudvoice.us", IsActive = false },
            new Coach() { FirstName = "Olexander", LastName = "Usyk", Email = "usyk@boxing.ua", IsActive = true },
            new Coach() { FirstName = "Vitaly", LastName = "Klichko", Email = "KO@boxing.ua", IsActive = true }
        };

        foreach (Coach c in Coaches)
        {
            c.Id = new Guid(); c.CreatedAt = DateTime.Now; c.ModifiedAt = DateTime.Now;
            c.CreatedBy = admin; c.ModifiedBy = admin; c.PhotoUrl = "Data/Photos/" + c.FirstName + c.LastName + ".jpg";
            c.PassportNumber = (char)(r.Next(65, 82)) + (char)(r.Next(65, 82)) + r.Next(100000, 999999).ToString();
            c.PhoneNumber = "+" + r.Next(100000, 499999).ToString() + r.Next(100000, 999999).ToString(); c.IsAtWork = c.IsActive;

            try
            {
                await AddCoachCommand.ExecuteAsync(c);
            }
            catch (Exception ex)
            {
                ErrorMessage = ex.Message;
            }
        }

        Visitors = new List<Visitor>() {
            new Visitor() { FirstName = "Vasiliy", LastName = "Pupkin", Email = "vasiliy@pupkin.net" },
            new Visitor() { FirstName = "Petro", LastName = "Pumpkin", Email = "petropumpkin@ukr.net" },
            new Visitor() { FirstName = "Irina", LastName = "Nalivayko", Email = "irina_n@ukr.net" },
            new Visitor() { FirstName = "Fedor", LastName = "Andreev", Email = "fedorandreev@kpi.ua" },
            new Visitor() { FirstName = "Tatiana", LastName = "Loseva", Email = "loseva_tatiana@gmail.com" },
            new Visitor() { FirstName = "Ivan", LastName = "Ivanov", Email = "ivanov@kabmin.gov.ua" },
            new Visitor() { FirstName = "Bogdan", LastName = "Vernyi", Email = "bog@faith.com" },
            new Visitor() { FirstName = "Sylvester", LastName = "Stallone", Email = "rambo@rocky.us" }
        };

        foreach (Visitor v in Visitors)
        {
            v.Id = new Guid(); v.RegistrationDate = DateTime.Now; v.IsActive = r.Next(0, 10) < 3 ? false : true;
            v.PhotoUrl = null; // "Data/Photos/" + v.FirstName + v.LastName + ".jpg";
            if (v.Email == "rambo@rocky.us") v.PhotoUrl = "Data/Photos/SylvesterStallone.jpg";
            v.PhoneNumber = $"+3806{r.Next(100000000, 999999999)}"; v.IsInGym = !v.IsActive ? false : (r.Next(0, 10) < 5 ? false : true);
            VisitorCard vc = new(); 
            vc.Id = new Guid(); vc.RegistrationDate = v.RegistrationDate; vc.CreatedAt = DateTime.Now;
            vc.CreatedBy = admin!; vc.IsActive = v.IsActive; vc.BarCode = $"482{r.NextInt64(1000000000, 9999999999)}";
            vc.Visitor = v;
            v.VisitorCard = vc;
            try
            {
                await AddVisitorCardCommand.ExecuteAsync(v.VisitorCard);
                // await AddVisitorCommand.ExecuteAsync(v); // Visitors are added automatically as external keys (commands are not called)
            }
            catch (Exception ex)
            {
                ErrorMessage = ex.Message;
            }
        }
    }

    private async Task CoachesReloadAsync(string? sortLabel)
    {
        await GetCoachesAtWorkAsync();
        if (!string.IsNullOrWhiteSpace(coachSearchString))
            Coaches = Coaches?
                .Where(c => $"{c.FirstName} {c.LastName} {c.PhoneNumber} {c.Email}"
                    .Contains(coachSearchString, StringComparison.OrdinalIgnoreCase))
                .ToList();
        switch (sortLabel)
        {
            case "ln_sort":
                Coaches = Coaches.OrderByDirection(SortDirection.Ascending, o => o.LastName).ToList();
                break;
            case "ph_sort":
                Coaches = Coaches.OrderByDirection(SortDirection.Ascending, o => o.PhoneNumber).ToList();
                break;
        }
        // Coaches = Coaches.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();
        StateHasChanged();
    }

    private async Task VisitorsReloadAsync(string? sortLabel)
    {
        await GetVisitorsInGymAsync();
        if (!string.IsNullOrWhiteSpace(visitorSearchString))
            Visitors = Visitors?
                .Where(v => $"{v.FirstName} {v.LastName} {v.PhoneNumber} {v.Email} {v.VisitorCard?.BarCode}"
                        .Contains(visitorSearchString, StringComparison.OrdinalIgnoreCase))
                .ToList();
        switch (sortLabel)
        {
            case "ln_sort":
                Visitors = Visitors.OrderByDirection(SortDirection.Ascending, o => o.LastName).ToList();
                break;
            case "ph_sort":
                Visitors = Visitors.OrderByDirection(SortDirection.Ascending, o => o.PhoneNumber).ToList();
                break;
        }
        // Visitors = Visitors.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();
        StateHasChanged();
    }

    private async Task OnVisitorSearch(string text)
    {
        visitorSearchString = text;
        await VisitorsReloadAsync(visitorsTable?.SortLabel);
    }

    private async Task OnCoachSearch(string text)
    {
        coachSearchString = text;
        await CoachesReloadAsync(coachesTable?.SortLabel);
    }

    private async void RegisterNewVisitorClick()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, MaxWidth = MaxWidth.Small, CloseButton = true };
        var parameters = new DialogParameters();
        parameters.Add("visitorModel", null);
        var dialog = DialogService.Show<CreateVisitorDialog>("New visitor registration", parameters, options);
        await dialog.Result;
    }

    private async Task CheckVisitorInClick(MouseEventArgs args)
    {
        await OpenVisitorCheckIn();
    }

    private async Task OpenVisitorCheckIn()
    {
        var options = new DialogOptions { 
                FullWidth = true, 
                MaxWidth = MaxWidth.Large,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                CloseOnEscapeKey = true
        };
        var dialog = DialogService.Show<VisitorCheckInDialog>("Checking a visitor in", options);
        await dialog.Result;
        await VisitorsReloadAsync(visitorsTable?.SortLabel);
        await Task.Delay(100); // for db connection stability
    }

    private async Task CheckCoachInClick(MouseEventArgs args)
    {
        await OpenCoachCheckIn();
    }

    private async Task OpenCoachCheckIn()
    { 
        var options = new DialogOptions { 
                FullWidth = true, 
                MaxWidth = MaxWidth.Large,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                CloseOnEscapeKey = true
        };
        var dialog = DialogService.Show<CoachCheckInDialog>("Checking a coach in", options);
        await dialog.Result;
        await CoachesReloadAsync(coachesTable?.SortLabel);
        await Task.Delay(100); // for db connection stability
    }

    private async Task OpenVisitorView(Visitor viewedVisitor)
    {
        var options = new DialogOptions
            {
                FullWidth = true,
                MaxWidth = viewedVisitor.PhotoUrl == null ? MaxWidth.Small : MaxWidth.Medium,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                CloseOnEscapeKey = true,
            };
        var parameters = new DialogParameters();
        parameters.Add("visitorModel", viewedVisitor);
        var dialog = DialogService.Show<VisitorViewDialog>("Visitor details", parameters, options);
        await dialog.Result;
    }

    private async Task VisitorRowClickEvent(TableRowClickEventArgs<Visitor> tableRowClickEventArgs)
    {
        await OpenVisitorView(tableRowClickEventArgs.Item);
    }

    private async Task OpenCoachView(Coach viewedCoach)
    {
        var options = new DialogOptions
            {
                FullWidth = true,
                MaxWidth = viewedCoach.PhotoUrl == null ? MaxWidth.Small : MaxWidth.Medium,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                CloseOnEscapeKey = true,
            };
        var parameters = new DialogParameters();
        parameters.Add("coachModel", viewedCoach);
        var dialog = DialogService.Show<CoachViewDialog>("Coach details", parameters, options);
        await dialog.Result;
    }
    
    private async Task CoachRowClickEvent(TableRowClickEventArgs<Coach> tableRowClickEventArgs)
    {
        await OpenCoachView(tableRowClickEventArgs.Item);
    }
    
}
