@page "/receptionist/ActiveCoachesList"
@using GymOffice.Common.Contracts.CommandContracts.ReceptionistCommands.Update
@using GymOffice.Common.Contracts.DataProviderContracts
@using GymOffice.Common.DTOs;
@inject IUpdateCoachCommand UpdateCoachCommand
    
<!-- All Coaches list with checkin possibility -->
<MudText Align="Align.Center">Active coaches list allows to check-in a selected coach.</MudText>
<MudItem xs="4" sm="4" md="12" Style="overflow-y: scroll; overflow-x: scroll">
    <MudCard Elevation="25" Class="rounded-lg pb-4">
        <MudCardHeader>
            <CardHeaderContent>
                <MudTextField T="string" ValueChanged="@(str=>OnCoachSearch(str))" Placeholder="Search a coach" Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudTable Ref="@coachesTable" Items="@Coaches" Hover="true" Dense="true" RowsPerPage="8" OnRowClick="CoachRowClickEvent" T="Coach">
                <HeaderContent>
                    <MudTh><MudTableSortLabel Enabled="false" 
                        SortBy="new Func<Coach, object>(x=>x.FirstName)">First Name</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="ln_sort" T="Coach" InitialDirection="SortDirection.Ascending" 
                        SortBy="new Func<Coach, object>(x=>x.LastName)">Last Name</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="em_sort" T="Coach" 
                        SortBy="new Func<Coach, object>(x=>x.Email)">Email</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="ph_sort" T="Coach" 
                        SortBy="new Func<Coach, object>(x=>x.PhoneNumber)">Phone Number</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="aw_sort" T="Coach"
                        SortBy="new Func<Coach, object>(x=>x.IsAtWork)">At Work</MudTableSortLabel></MudTh>
                    <MudTh>Details</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Class="flex-shrink-0" DataLabel="First Name">@context.FirstName</MudTd>
                    <MudTd Class="flex-shrink-0" DataLabel="Last Name">@context.LastName</MudTd>
                    <MudTd DataLabel="Email" HideSmall="true">@context.Email</MudTd>
                    <MudTd DataLabel="Phone Number" HideSmall="true">@context.PhoneNumber</MudTd>
                    <MudTd Class="flex-shrink-0" DataLabel="At Work">
                        <MudButton Variant="Variant.Text" Disabled="@(!context.IsActive)" OnClick="@(()=>IsAtWorkChanged(context))"
                            StartIcon="@(context.IsAtWork ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" 
                            Color="@(context.IsAtWork ? Color.Success : Color.Error)">
                            <MudText>@(context.IsAtWork ? "YES" : "NO  ")</MudText>
                        </MudButton>
                    </MudTd>
                    <MudTd><MudIconButton Icon="@Icons.Material.Filled.Preview" Variant="Variant.Filled" Color="Color.Secondary"
                        Size="Size.Small" OnClick="(() => OpenCoachView(context))" />
                    </MudTd>
                    </RowTemplate>
                <NoRecordsContent>
                    <MudText>No matching records found</MudText>
                </NoRecordsContent>
                <PagerContent>
                        <MudTablePager PageSizeOptions="new int[]{8, 15, 30}" InfoFormat="@infoFormat" HorizontalAlignment="HorizontalAlignment.Center" />
                </PagerContent>
            </MudTable>
        </MudCardContent>
    </MudCard>
</MudItem>

@code {
    [Inject] public ICoachDataProvider CoachDataProvider { get; set; } = null!;
    [Inject] public IDialogService DialogService { get; set; } = null!;

    // [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    // void Close() => MudDialog?.Close(DialogResult.Ok(true)); // for the button: OnClick="Close"
    
    private ICollection<Coach>? Coaches = new List<Coach>();
    private MudTable<Coach>? coachesTable;
    private Coach? changedCoach = null;
    private string? coachSearchString = null;
    private string infoFormat = "Items {first_item}-{last_item} of {all_items}";

    protected override async Task OnInitializedAsync()
    {
        coachesTable = new();
        await GetActiveCoachesAsync();
    }

    private async Task GetActiveCoachesAsync()
    {
        Coaches = await CoachDataProvider.GetActiveCoachesAsync();
        await Task.Delay(100); // for db connection stability
    }

    // Changing the value in the table should change it in the database
    private async Task IsAtWorkChanged(Coach currentCoach)
    {
        changedCoach = currentCoach;
        if (changedCoach != null)
        {
            changedCoach.IsAtWork = !changedCoach.IsAtWork;
            await UpdateCoachCommand.ExecuteAsync(changedCoach);
        }
        StateHasChanged();
    }

    private async Task CoachesReloadAsync(string? sortLabel)
    {
        await GetActiveCoachesAsync();
        if (!string.IsNullOrWhiteSpace(coachSearchString))
            Coaches = Coaches?
                .Where(c => $"{c.FirstName} {c.LastName} {c.Email} {c.PhoneNumber}".Contains(coachSearchString, StringComparison.OrdinalIgnoreCase))
                .ToList();
        switch (sortLabel)
        {
            case "ln_sort":
                Coaches = Coaches.OrderByDirection(SortDirection.Ascending, o => o.LastName).ToList();
                break;
            case "em_sort":
                Coaches = Coaches.OrderByDirection(SortDirection.Ascending, o => o.Email).ToList();
                break;
            case "ph_sort":
                Coaches = Coaches.OrderByDirection(SortDirection.Ascending, o => o.PhoneNumber).ToList();
                break;
            case "aw_sort":
                Coaches = Coaches.OrderByDirection(SortDirection.Ascending, o => o.IsAtWork).ToList();
                break;
        }
        // Coaches = Coaches.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();
        StateHasChanged();
    }

    private async Task OnCoachSearch(string text)
    {
        coachSearchString = text;
        await CoachesReloadAsync(coachesTable?.SortLabel);
    }

    private async Task OpenCoachView(Coach viewedCoach)
    {
        var options = new DialogOptions
            {
                FullWidth = true,
                MaxWidth = viewedCoach.PhotoUrl == null ? MaxWidth.Small : MaxWidth.Medium,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                CloseOnEscapeKey = true,
                NoHeader = true
            };
        var parameters = new DialogParameters();
        parameters.Add("coachModel", viewedCoach);
        var dialog = DialogService.Show<CoachViewDialog>("View a coach", parameters, options);
        await dialog.Result;
    }

    private async Task CoachRowClickEvent(TableRowClickEventArgs<Coach> tableRowClickEventArgs)
    {
        await OpenCoachView(tableRowClickEventArgs.Item);
    }

}
