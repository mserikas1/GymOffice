@attribute [Authorize(Roles = "Receptionist")]
@inject IUpdateCoachCommand UpdateCoachCommand
    
<!-- Inactive Coaches list with checkin possibility -->
<MudDialog DefaultFocus="DefaultFocus.Element"> 
    <DialogContent>
        <MudText Align="Align.Center">List of active coaches who are not at work allows to check-in a selected coach.</MudText>
        <!-- Coaches list -->
        <MudItem xs="4" sm="4" md="12" Style="overflow-y: scroll; overflow-x: scroll">
            <MudCard Elevation="0" Class="rounded-lg pb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudTextField T="string" ValueChanged="@(str=>OnCoachSearch(str))" Placeholder="Search a coach" Adornment="Adornment.Start"
                            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudTable Ref="@coachesTable" Items="@Coaches" Hover="true" Dense="true" T="Coach">
                        <HeaderContent>
                            <MudTh>First Name</MudTh>
                            <MudTh><MudTableSortLabel SortLabel="ln_sort" T="Coach" InitialDirection="SortDirection.Ascending" 
                                SortBy="new Func<Coach, object>(x=>x.LastName)">Last Name</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortLabel="em_sort" T="Coach" 
                                SortBy="new Func<Coach, object>(x=>x.Email)">Email</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortLabel="ph_sort" T="Coach" 
                                SortBy="new Func<Coach, object>(x=>x.PhoneNumber)">Phone Number</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel Enabled="false"
                                SortBy="new Func<Coach, object>(x=>x.IsAtWork)">At Work</MudTableSortLabel></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd Class="flex-shrink-0" DataLabel="First Name">@context.FirstName</MudTd>
                            <MudTd Class="flex-shrink-0" DataLabel="Last Name">@context.LastName</MudTd>
                            <MudTd DataLabel="Email" HideSmall="true">@context.Email</MudTd>
                            <MudTd DataLabel="Phone Number" HideSmall="true">@context.PhoneNumber</MudTd>
                            <MudTd Class="flex-shrink-0" DataLabel="At Work">
                               <MudButton Variant="Variant.Text" Disabled="@(!context.IsActive)" OnClick="@(()=>IsAtWorkChanged(context))"
                                    StartIcon="@(context.IsAtWork ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" 
                                    Color="@(context.IsAtWork ? Color.Success : Color.Error)">
                                    <MudText>@(context.IsAtWork ? "YES" : "NO ")</MudText>
                               </MudButton>
                            </MudTd>
                        </RowTemplate>
                        <NoRecordsContent>
                            <MudText>No matching records found</MudText>
                        </NoRecordsContent>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[]{6, 10, 20}" InfoFormat="@infoFormat" HorizontalAlignment="HorizontalAlignment.Center" />
                        </PagerContent>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </DialogContent>
</MudDialog>

    @code {
    [Inject] public ICoachDataProvider CoachDataProvider { get; set; } = null!;
    
    // [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    // void Close() => MudDialog?.Close(DialogResult.Ok(true)); // for the button: OnClick="Close"
    
    private ICollection<Coach>? Coaches = new List<Coach>();
    private MudTable<Coach>? coachesTable;
    private Coach? changedCoach = null;
    private string? coachSearchString = null;
    private string infoFormat = "Items {first_item}-{last_item} of {all_items}";

    protected override async Task OnInitializedAsync()
    {
        coachesTable = new();
        await GetActiveCoachesNotAtWorkAsync();
    }

    private async Task GetActiveCoachesNotAtWorkAsync()
    {
        Coaches = await CoachDataProvider.GetActiveCoachesNotAtWorkAsync();
        await Task.Delay(100); // for db connection stability
    }

    // Changing the value in the table should change it in the database
    private async Task IsAtWorkChanged(Coach currentCoach)
    {
        changedCoach = currentCoach;
        if (changedCoach != null)
        {
            changedCoach.IsAtWork = !changedCoach.IsAtWork;
            await UpdateCoachCommand.ExecuteAsync(changedCoach);
        }
        StateHasChanged();
    }

    private async Task CoachesReloadAsync(string? sortLabel)
    {
        await GetActiveCoachesNotAtWorkAsync();
        if (!string.IsNullOrWhiteSpace(coachSearchString))
            Coaches = Coaches?
                .Where(c => $"{c.FirstName} {c.LastName} {c.Email} {c.PhoneNumber}".Contains(coachSearchString, StringComparison.OrdinalIgnoreCase))
                .ToList();
        switch (sortLabel)
        {
            case "ln_sort":
                Coaches = Coaches.OrderByDirection(SortDirection.Ascending, o => o.LastName).ToList();
                break;
            case "em_sort":
                Coaches = Coaches.OrderByDirection(SortDirection.Ascending, o => o.Email).ToList();
                break;
            case "ph_sort":
                Coaches = Coaches.OrderByDirection(SortDirection.Ascending, o => o.PhoneNumber).ToList();
                break;
            case "ac_sort":
                Coaches = Coaches.OrderByDirection(SortDirection.Ascending, o => o.IsActive).ToList();
                break;
        }
        // Coaches = Coaches.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();
        StateHasChanged();
    }

    private async Task OnCoachSearch(string text)
    {
        coachSearchString = text;
        await CoachesReloadAsync(coachesTable?.SortLabel);
    }

}
